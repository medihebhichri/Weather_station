####code 1 ######

#include <PinChangeInterrupt.h> // Include the PinChangeInterrupt library

#define CLK 6
#define DT 7
#define SW 8

int angle = 0;
int counter = 0;
int currentState;
int initState;
unsigned long debounceDelay = 0;

void setup() {
  pinMode(CLK, INPUT);
  pinMode(DT, INPUT);
  pinMode(SW, INPUT_PULLUP);
  Serial.begin(9600);

  initState = digitalRead(CLK);

  attachInterrupt(0, encoder_value, CHANGE);
  attachInterrupt(1, encoder_value, CHANGE);
  attachPCINT(digitalPinToPCINT(SW), button_press, CHANGE);
}

void loop() {
  int currentAngle = encoder_value();
  // Do something with the currentAngle value
}

void button_press() {
  int buttonVal = digitalRead(SW);
  if (buttonVal == LOW) {
    if (millis() - debounceDelay > 200) {
      Serial.println("Button pressed!");
    }
    debounceDelay = millis();
  }
}

int encoder_value() {
  currentState = digitalRead(CLK);
  if (currentState != initState && currentState == 1) {
    if (digitalRead(DT) != currentState) {
      counter++;
    } else {
      counter--;
    }

    if (counter < 0) {
      counter = 19; // Wrap around to the maximum value
    } else if (counter > 19) {
      counter = 0;  // Wrap around to the minimum value
    }
    
    angle = counter * (360 / 20); // Calculate the angle
    Serial.println(angle);
  }
  initState = currentState;
  return angle; // Return the calculated angle
}





### code 2 ###

const int WindPin = A0;
int windPinValue = 0;
bool magnetDetected = false;
unsigned long startTime = 0;
unsigned long endTime = 0;

enum State {
  IDLE,
  DETECTING,
  TIMING
};

State currentState = IDLE;
bool valid = false;
int counter = 0;
const int numSamples = 100;   // Number of samples to collect
unsigned long samples[numSamples];  // Array to store collected samples
int sampleIndex = 0;        // Index to keep track of samples

void setup() {
  pinMode(WindPin, INPUT);
  Serial.begin(9600);
}

void loop() {
windSpeedCalculator();
}

void windSpeedCalculator(){
    windPinValue = analogRead(WindPin);

  switch (currentState) {
    case IDLE:
      if (windPinValue < 5) {
        currentState = DETECTING;
      }
      break;

    case DETECTING:
      if (windPinValue > 5) {
        startTime = millis();
        currentState = TIMING;
      }
      break;

    case TIMING:
      if (windPinValue < 5) {
        endTime = millis();
        unsigned long elapsedTime = endTime - startTime;
        
        // Store the elapsed time in the array
        samples[sampleIndex] = elapsedTime;
        sampleIndex++;

        if (sampleIndex >= numSamples) {
          // All samples collected, calculate average of closest values
          unsigned long targetTime = samples[numSamples / 2]; // Choose a target time
          unsigned long closestDiff = abs(samples[0] - targetTime);
          unsigned long sumClosest = samples[0];
          for (int i = 1; i < numSamples; i++) {
            unsigned long diff = abs(samples[i] - targetTime);
            if (diff < closestDiff) {
              closestDiff = diff;
              sumClosest = samples[i];
            }
          }
          // Calculate wind speed in km/h using calibration factor 120
          float windSpeedMPerS = (2.0 * 3.14159265358979323846 * 0.14) / ((float)sumClosest / numSamples) * 100.0;
          float windSpeedKmPerH = windSpeedMPerS * 3.6;
          
          Serial.print("Wind Speed (km/h): ");
          Serial.print(windSpeedKmPerH);

          // Reset for the next set of samples
          sampleIndex = 0;
          currentState = IDLE;
        }
      }
      break;
  }
  delay(1);
}
